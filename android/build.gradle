buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['SmartscannerReactNative_kotlinVersion']

  repositories {
      google()
      mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.3'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") &&  rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['SmartscannerReactNative_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['SmartscannerReactNative_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

dependencies {
    //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

  //smartscanner
  implementation 'androidx.core:core-ktx:1.3.2'
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    
    // ML Kit dependencies
  implementation 'com.google.mlkit:text-recognition:16.0.0-beta3'
  implementation 'com.google.mlkit:barcode-scanning:17.0.2'
  // CameraX
  def camerax_version = "1.0.0-beta07"
  implementation "androidx.camera:camera-core:$camerax_version"
  // CameraX core library using camera2 implementation
  implementation "androidx.camera:camera-camera2:$camerax_version"
  // CameraX Lifecycle Library
  implementation "androidx.camera:camera-lifecycle:$camerax_version"
  // CameraX View class
  implementation "androidx.camera:camera-view:1.0.0-alpha14"
  // MRZ
  implementation 'org.slf4j:slf4j-android:1.7.30'
  implementation 'cz.adaptech:tesseract4android:4.1.1'
  // Gson
  implementation 'com.google.code.gson:gson:2.8.6'
  // Glide
  implementation 'com.github.bumptech.glide:glide:4.12.0'
  implementation 'jp.wasabeef:glide-transformations:4.3.0'
  annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
  // ID PASS lite
  implementation 'com.google.protobuf:protobuf-lite:3.0.1'
  implementation 'org.idpass:idpass-lite-java-android:0.1@aar'
  // SmartScanner MRZ Parser
  
  // SmartScanner API Intent Call Out

  // Gzip JSON
  implementation 'com.jayway.jsonpath:json-path:2.5.0'
  implementation 'com.github.wnameless.json:json-flattener:0.12.0'

  // NFC
  //implementation files('libs/jmrtd-0.7.25.aar')
  // implementation 'org.jmrtd:jmrtd:0.7.18'
  // implementation 'com.madgag.spongycastle:prov:1.58.0.0'
  // implementation 'net.sf.scuba:scuba-sc-android:0.0.23'
  // implementation group: 'org.ejbca.cvc', name: 'cert-cvc', version: '1.4.6'
  implementation files('aar/smartscannerlib-release.aar')
  implementation files('aar/smartscanner-mrz-parser.aar')
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "SmartscannerReactNative"
    codegenJavaPackageName = "com.smartscannerreactnative"
  }
}
